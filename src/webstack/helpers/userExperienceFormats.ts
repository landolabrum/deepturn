import { PhoneNumberUtil, PhoneNumberFormat } from "google-libphonenumber";
import { InvalidCell, NaCell } from "@webstack/components/AdapTable/components/AdaptTableContent/components/AdaptTableCell/AdaptTableCell";
type dateProps = string | number | Date;
type returnType = "string" | "object";
interface OptionsProps {
  time?: boolean;
  returnType?: returnType;
  format?: "MM-DD-YYYY" | "MM-YYYY";
  server?: boolean;
}
export function stringToKebab(str?: string) {
  if (!str) return "";
  return str.toLowerCase().replaceAll(" ", "-");
}

// PHONE FORMAT
export const phoneFormat = (
  phoneNumber: string,
  countryCode: string
): string | React.ReactElement => {
  const phoneUtil = PhoneNumberUtil.getInstance();
  let formattedNumber:string | React.ReactElement = phoneNumber;
  try {
    const parsedNumber = phoneUtil.parseAndKeepRawInput(
      phoneNumber,
      countryCode
    );
    formattedNumber = phoneUtil.format(
      parsedNumber,
      PhoneNumberFormat.NATIONAL
    );
  } catch (e) {
    formattedNumber = NaCell();
  }
  return formattedNumber;
};

// COUNTRY
export function countryFormat(countryISO: string) {
  const countries = {
    us: "ğŸ‡ºğŸ‡¸ USA",
    ca: "ğŸ‡¨ğŸ‡¦ Canada",
    mx: "ğŸ‡²ğŸ‡½ Mexico",
    de: "ğŸ‡©ğŸ‡ª Germany",
    gb: "ğŸ‡¬ğŸ‡§ United Kingdom",
    fr: "ğŸ‡«ğŸ‡· France",
    es: "ğŸ‡ªğŸ‡¸ Spain",
    it: "ğŸ‡®ğŸ‡¹ Italy",
    nl: "ğŸ‡³ğŸ‡± Netherlands",
    be: "ğŸ‡§ğŸ‡ª Belgium",
    dk: "ğŸ‡©ğŸ‡° Denmark",
    se: "ğŸ‡¸ğŸ‡ª Sweden",
    no: "ğŸ‡³ğŸ‡´ Norway",
    fi: "ğŸ‡«ğŸ‡® Finland",
    ee: "ğŸ‡ªğŸ‡ª Estonia",
    lv: "ğŸ‡±ğŸ‡» Latvia",
    lt: "ğŸ‡±ğŸ‡¹ Lithuania",
    pl: "ğŸ‡µğŸ‡± Poland",
    cz: "ğŸ‡¨ğŸ‡¿ Czechia",
    sk: "ğŸ‡¸ğŸ‡° Slovakia",
    hu: "ğŸ‡­ğŸ‡º Hungary",
    at: "ğŸ‡¦ğŸ‡¹ Austria",
    ch: "ğŸ‡¨ğŸ‡­ Switzerland",
    pt: "ğŸ‡µğŸ‡¹ Portugal",
    ie: "ğŸ‡®ğŸ‡ª Ireland",
    is: "ğŸ‡®ğŸ‡¸ Iceland",
    gr: "ğŸ‡¬ğŸ‡· Greece",
    tr: "ğŸ‡¹ğŸ‡· Turkey",
    ru: "ğŸ‡·ğŸ‡º Russia",
    sa: "ğŸ‡¸ğŸ‡¦ Saudi Arabia",
    ae: "ğŸ‡¦ğŸ‡ª United Arab Emirates",
    qa: "ğŸ‡¶ğŸ‡¦ Qatar",
    kw: "ğŸ‡°ğŸ‡¼ Kuwait",
    om: "ğŸ‡´ğŸ‡² Oman",
    bh: "ğŸ‡§ğŸ‡­ Bahrain",
    in: "ğŸ‡®ğŸ‡³ India",
    cn: "ğŸ‡¨ğŸ‡³ China",
    jp: "ğŸ‡¯ğŸ‡µ Japan",
    kr: "ğŸ‡°ğŸ‡· South Korea",
    hk: "ğŸ‡­ğŸ‡° Hong Kong",
    tw: "ğŸ‡¹ğŸ‡¼ Taiwan",
    sg: "ğŸ‡¸ğŸ‡¬ Singapore",
    id: "ğŸ‡®ğŸ‡© Indonesia",
    th: "ğŸ‡¹ğŸ‡­ Thailand",
    ph: "ğŸ‡µğŸ‡­ Philippines",
    au: "ğŸ‡¦ğŸ‡º Australia",
    nz: "ğŸ‡³ğŸ‡¿ New Zealand",
    ar: "ğŸ‡¦ğŸ‡· Argentina",
    br: "ğŸ‡§ğŸ‡· Brazil",
    cl: "ğŸ‡¨ğŸ‡± Chile",
    co: "ğŸ‡¨ğŸ‡´ Colombia",
    ec: "ğŸ‡ªğŸ‡¨ Ecuador",
    pe: "ğŸ‡µğŸ‡ª Peru",
    uy: "ğŸ‡ºğŸ‡¾ Uruguay",
    ve: "ğŸ‡»ğŸ‡ª Venezuela",
    bo: "ğŸ‡§ğŸ‡´ Bolivia",
    py: "ğŸ‡µğŸ‡¾ Paraguay",
    cr: "ğŸ‡¨ğŸ‡· Costa Rica",
    do: "ğŸ‡©ğŸ‡´ Dominican Republic",
    sv: "ğŸ‡¸ğŸ‡» El Salvador",
    gt: "ğŸ‡¬ğŸ‡¹ Guatemala",
    hn: "ğŸ‡­ğŸ‡³ Honduras",
    ni: "ğŸ‡³ğŸ‡® Nicaragua",
    pa: "ğŸ‡µğŸ‡¦ Panama",
    bs: "ğŸ‡§ğŸ‡¸ Bahamas",
    bb: "ğŸ‡§ğŸ‡§ Barbados",
    cu: "ğŸ‡¨ğŸ‡º Cuba",
    jm: "ğŸ‡¯ğŸ‡² Jamaica",
    ht: "ğŸ‡­ğŸ‡¹ Haiti",
    tt: "ğŸ‡¹ğŸ‡¹ Trinidad & Tobago",
    ag: "ğŸ‡¦ğŸ‡¬ Antigua & Barbuda",
    dm: "ğŸ‡©ğŸ‡² Dominica",
    gd: "ğŸ‡¬ğŸ‡© Grenada",
    kn: "ğŸ‡°ğŸ‡³ St. Kitts & Nevis",
    lc: "ğŸ‡±ğŸ‡¨ St. Lucia",
    vc: "ğŸ‡»ğŸ‡¨ St. Vincent & Grenadines",
    ai: "ğŸ‡¦ğŸ‡® Anguilla",
    bm: "ğŸ‡§ğŸ‡² Bermuda",
    ky: "ğŸ‡°ğŸ‡¾ Cayman Islands",
    ms: "ğŸ‡²ğŸ‡¸ Montserrat",
    tc: "ğŸ‡¹ğŸ‡¨ Turks & Caicos Islands",
    vg: "ğŸ‡»ğŸ‡¬ British Virgin Islands",

    // NON EMOJIS
    cf: "Central Africa Republic",
    cm: "Camaroon",
    ly: "Libya",
    am: "Armenia",
    ao: "Angola",
    aq: "Antarctica",
    bi: "Burundi",
    bw: "Botswana",
    bz: "Belize",
    ga: "Gabon",
    ge: "Georgia",
    gh: "Ghana",
    jo: "Jordan",
    la: "Laos",
    lu:"Luxembourg",
    // add more country codes and their corresponding names as needed
  };
  const countryCodes: { [key: string]: string } = countries;
  if (countryISO?.toLowerCase() in countries) {
    countryISO = countryCodes[countryISO?.toLowerCase()];
    return countryISO;
  } else {
    return countryISO ? countryISO.toUpperCase() : NaCell();
  }
}

// DATES
export function dateFormat(
  suppliedDate: dateProps,
  options: OptionsProps = {
    time: false,
    returnType: "string",
    format: "MM-DD-YYYY",
    server: false,
  }
): string | string[] | React.ReactElement {
  if (options.server) {
    const date = new Date(suppliedDate);
    return `${date.getFullYear()}-${(date.getMonth() + 1)
      .toString()
      .padStart(2, "0")}-${date.getDate().toString().padStart(2, "0")}`;
  } else {
    if (typeof suppliedDate === "string") suppliedDate = new Date(suppliedDate);
    const mDY: Intl.DateTimeFormatOptions = {
      month: "short",
      day: "numeric",
      year: "numeric",
    };
    const mY: Intl.DateTimeFormatOptions = {
      month: "short",
      year: "numeric",
    };
    const timeOptions: Intl.DateTimeFormatOptions = {
      hour: "numeric",
      minute: "numeric",
      hour12: true,
    };
    try {
      let dateString = suppliedDate.toLocaleString("en-US", mDY);
      if (options?.format && options.format === "MM-YYYY")
        dateString = suppliedDate.toLocaleString("en-US", mY);
      if (options.time) {
        const timeString = suppliedDate.toLocaleString("en-US", timeOptions);
        if (options.returnType === "object") return [dateString, timeString];
        return `${dateString} ${timeString}`;
      }
      if(dateString.length < 8)return InvalidCell();
      return dateString;
    } catch (e) {
      return NaCell();
    }
  }
}

// export function dateServerFormat(dateString: string) {
//   const date = new Date(dateString);
//   return `${date.getFullYear()}-${(date.getMonth() + 1)
//     .toString()
//     .padStart(2, "0")}-${date.getDate().toString().padStart(2, "0")}`;
// }

// CURRENCY

// export function numberToUsd(amount: number) {
//   const formatted = `$${amount?.toLocaleString("en-US", {
//     minimumFractionDigits: 2,
//     maximumFractionDigits: 2,
//   })}`;
//   return formatted;
// }

export function numberToUsd(amount: number) {
  let formatted = '0'
  if(amount)formatted = `${amount.toLocaleString("en-US", {
    minimumFractionDigits: 2,
    maximumFractionDigits: 2,
  })}`;
  formatted = `$${formatted}`;
  return formatted;
}
